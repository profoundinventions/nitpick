#!/usr/bin/env php
<?php declare(strict_types = 1);

namespace ProfoundInventions\Nitpick;

require __DIR__ . '/../vendor/autoload.php';

if (count($_SERVER['argv']) !== 4) {
    usage();
}

list($firstFile, $secondFile, $analyzer) = parseArgs(array_slice($_SERVER['argv'], 1));
$fileOne = file_get_contents($firstFile);
if ($fileOne === false) {
    echo "Error reading first file (\"$firstFile\")\n";
    exit(1);
}
$fileTwo = file_get_contents($secondFile);
if ($fileTwo === false) {
    echo "Error reading second file (\"secondFile\")\n";
    exit(1);
}
diff($analyzer ,$fileOne, $fileTwo);

function parseArgs(array $args): array
{
    $analyzer = "";
    $restArgs = [];
    foreach ($args as $arg) {
        if (strpos($arg, "--analyzer=") !== false) {
            $analyzer = substr($arg, strlen('--analyzer='));
            if (!in_array($analyzer, ['phpstan', 'psalm'], true)) {
                usage();
            }
        } else {
            $restArgs[] = $arg;
        }
    }
    if (!$analyzer || count($restArgs) !== 2) {
        usage();
    }
    return array_merge($restArgs, [$analyzer]);
}

function usage() : void
{
    echo "Usage:\n";
    echo "   nitpick --analyzer=ANALYZER <old-static-analyzer-output> <new-analyzer-output>\n";
    echo "\n";
    echo "ANALYZER is one of: \"phpstan\", or \"psalm\".\n";
    exit(1);
}

function diff(string $analyzer, string $outputOne, string $outputTwo) : void
{
    $factory = new StaticAnalyzerFactory();
    $factory->pickAnalyzer($analyzer);
    $analyzer = $factory->build();

    $first = $analyzer->parse($outputOne);
    $second = $analyzer->parse($outputTwo);

    $diff = $first->compare($second);
    $errors = $diff->errors();

    if ($errors === []) {
        echo "NITPICK: NO ADDITIONAL ERRORS FOUND.\n";
        return;
    }

    echo "NITPICK: ADDITIONAL ERRORS FOUND\n";
    echo "--------------------------------\n";
    printf(
        "The following %d additional error(s) were found when running the %s analyzer:\n",
        count($errors),
        $analyzer->name()
    );
    echo "\n";

    foreach ($errors as $error) {
        $error->output();
        echo "\n";
    }
    exit(1);
}